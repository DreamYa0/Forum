<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
    http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 启动包扫描功能，以便注册带有@Controller、@Service、@repository、@Component等注解的类成为spring的bean -->
    <context:component-scan base-package="com.zbj.forum.web.controller"/>

    <!--自动静态资源放行驱动-->
    <mvc:default-servlet-handler/>

    <!--开启MVC注解初始化7个转换器-->
    <mvc:annotation-driven/>

    <!--开启动态代理功能-->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!--配置处理器适配器  -->
    <bean id="handlerMapping"
          class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/>
    <bean id="handlerAdapter"
          class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/>

    <!--jackson配置 -->
    <bean id="objectMapper" class="com.fasterxml.jackson.databind.ObjectMapper"/>

    <!--接收表单的参数-->
    <bean id="gsonHttpMessageConverter"
          class="org.springframework.http.converter.json.GsonHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <!-- 配置springMVC处理上传文件的信息 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="utf-8"/>
        <property name="maxUploadSize" value="10485760000"/>
        <property name="maxInMemorySize" value="40960"/>
    </bean>

    <!--拦截器-->
    <mvc:interceptors>
        <mvc:interceptor>
            <!-- 设置拦截器，拦截的（地址）规则 -->
            <mvc:mapping path="/**"/>
            <!-- 拦截器的全类名 -->
            <bean class="com.zbj.forum.web.interceptor.AuthInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <!--声明异常处理类的Bean -->
    <bean id="ExceptionHandler" class="com.zbj.forum.utils.ControllerExceptionHandler"/>

    <!--声明日志记录类的Bean -->
    <bean id="LogHandler" class="com.zbj.forum.utils.LogHandler"/>

    <!--声明AspectJ切面的Bean -->
    <!--<bean class="com.zbj.forum.utils.AspectJTest" factory-method="aspectOf">-->
        <!--<property name="userService" ref="userServiceImpl"/>-->
    <!--</bean>-->

    <!--配置AOP -->
    <aop:config>
        <!--定义AOP通知器 -->
        <aop:advisor advice-ref="advice"
                     pointcut="execution(* com.zbj.forum.service..*.*(..))"/>

        <!--把ExceptionHandler Bean声明为切面-->
        <aop:aspect ref="ExceptionHandler">
            <!--定义切点 -->
            <aop:pointcut id="ExceptionHandlerMethod" expression="execution(* com.zbj.forum.web.controller..*.*(..))"/>
            <!--配置环绕通知，环绕通知为最强大的通知具备有前置通知、后置通知、返回通知、异常通知的所有功能 -->
            <aop:around pointcut-ref="ExceptionHandlerMethod" method="ExceptionHandling"/>
        </aop:aspect>

        <!--把LogHandler Bean声明为切面-->
        <aop:aspect ref="LogHandler">
            <!--定义切点 -->
            <aop:pointcut id="LogHandlerMethod" expression="execution(* com.zbj.forum.service..*.*(..)) ||
                          execution(* com.zbj.forum.web.controller..*.*(..))"/>
            <!--配置前置通知-->
            <aop:before method="log" pointcut-ref="LogHandlerMethod"/>
            <!--配置后置通知-->
            <aop:after method="logArg" pointcut-ref="LogHandlerMethod"/>
            <!--配置返回通知-->
            <aop:after-returning method="logArgAndReturn" returning="returnObj" pointcut-ref="LogHandlerMethod"/>
        </aop:aspect>
    </aop:config>

</beans>