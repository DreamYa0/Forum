<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--导入德鲁伊连接池配置文件-->
    <import resource="classpath*:applicationContext-druid.xml"/>

    <!-- 启动包扫描功能，以便注册带有@Controller、@Service、@repository、@Component等注解的类成为spring的bean -->
    <context:component-scan base-package="com.zbj.forum">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 将jdbc.properties文件属性导入进来 -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations" value="classpath:jdbc.properties"/>
    </bean>

    <!-- 数据源配置 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <property name="driverClassName" value="${jdbc_driverClassName}"/>
        <property name="url" value="${jdbc_url}"/>
        <property name="username" value="${jdbc_username}"/>
        <property name="password" value="${jdbc_password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="20"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>
        <!--回收连接-->
        <property name="removeAbandoned" value="true"/>
        <!--回收连接时间-->
        <property name="removeAbandonedTimeout" value="1800"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
        <property name="proxyFilters">
            <list>
                <ref bean="stat-filter"/>
                <ref bean="log-filter"/>
                <ref bean="wall-filter"/>
            </list>
        </property>
    </bean>

    <!-- mybatis 自动扫描 mapper 类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定mapper接口所在的路径-->
        <property name="basePackage" value="com.zbj.forum.mapper"/>
    </bean>

    <!-- 把数据源注入给 mybatis 接管的 SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="typeAliasesPackage"
                  value="com.zbj.forum.entity,com.zbj.forum.query"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--指定mapper xml文件所在的路径-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>

    <!-- 事务支持 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--声明式实现事务管理-使advice,AOP通知器支持事务功能 -->
    <tx:advice id="advice" transaction-manager="transactionManager">
        <!-- 指定具体需要拦截的方法 -->
        <tx:attributes>
            <!-- name指具体需要拦截的方法名，propagation表示传播特性，read-only="true"表示事务只读，
             isolation="READ_COMMITTED"表示隔离级别是提交读,
             REQUIRED-支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择
             SUPPORTS-支持当前事务，如果当前没有事务，就以非事务方式执行
             MANDATORY-支持当前事务，如果当前没有事务，就抛出异常
             REQUIRES_NEW-新建事务，如果当前存在事务，把当前事务挂起
             NOT_SUPPORTED-以非事务方式执行操作，如果当前存在事务，就把当前事务挂
             NEVER-以非事务方式执行，如果当前存在事务，则抛出异常
             NESTED-如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则进行与REQUIRED类似的操作-->
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="query*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="*" propagation="REQUIRED" rollback-for="Exception,CRUDException"/>
        </tx:attributes>
    </tx:advice>

</beans>